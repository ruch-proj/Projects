import heapq
import random
import networkx as nx
import matplotlib.pyplot as plt

class RoadNetwork:
    def __init__(self, nodes):
        self.graph = {node: {} for node in range(nodes)}
        self.nodes = nodes

    def add_road(self, u, v, base_time):
        if u not in self.graph:
            self.graph[u] = {}
        if v not in self.graph:
            self.graph[v] = {}

        travel_time = base_time * random.uniform(1, 3)  # Simulating traffic
        self.graph[u][v] = travel_time
        self.graph[v][u] = travel_time  

    def dijkstra(self, start, end):
        pq = [(0, start)]
        distances = {node: float('inf') for node in self.graph}
        previous = {node: None for node in self.graph}
        distances[start] = 0

        while pq:
            current_distance, current_node = heapq.heappop(pq)

            if current_node == end:
                break

            for neighbor, weight in self.graph[current_node].items():
                distance = current_distance + weight
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    previous[neighbor] = current_node
                    heapq.heappush(pq, (distance, neighbor))

        return self.reconstruct_path(previous, start, end), distances[end]

    def reconstruct_path(self, previous, start, end):
        path = []
        node = end
        while node is not None:
            path.append(node)
            node = previous[node]
        return path[::-1] if path and path[-1] == start else []

    def draw_network(self):
        G = nx.Graph()
        for u in self.graph:
            for v, weight in self.graph[u].items():
                G.add_edge(u, v, weight=round(weight, 2))

        pos = nx.spring_layout(G)
        labels = nx.get_edge_attributes(G, 'weight')
        nx.draw(G, pos, with_labels=True, node_color="lightblue", edge_color="gray", node_size=1000, font_size=10)
        nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)
        plt.show()

if __name__ == "__main__":
    nodes = int(input("Enter the number of intersections (nodes): "))
    road_network = RoadNetwork(nodes)

    num_roads = int(input("Enter the number of roads: "))
    print("Enter roads in the format: node1 node2 base_travel_time")

    for _ in range(num_roads):
        while True:
            try:
                u, v, base_time = map(int, input().split())
                road_network.add_road(u, v, base_time)
                break  # Exit loop if input is valid
            except ValueError:
                print("❌ Invalid input! Please enter three numbers: node1 node2 base_travel_time")

    start = int(input("Enter the starting intersection: "))
    end = int(input("Enter the destination intersection: "))

    shortest_path, shortest_time = road_network.dijkstra(start, end)

    print(f"\n🚀 Shortest Path: {shortest_path} | Time: {shortest_time:.2f} min")

    road_network.draw_network()
