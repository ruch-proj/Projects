import os
import cv2
import numpy as np
import mediapipe as mp
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.utils import to_categorical

# -------------- ðŸ”§ SETTINGS ----------------
ACTIONS = ['hello', 'thanks', 'iloveyou', 'yes', 'no']  # Customize gestures
DATA_PATH = 'MP_Data'
SEQUENCE_LENGTH = 30
NUM_SEQUENCES = 30
MODE = 'predict'  # Options: 'collect', 'train', 'predict'

# -------------- ðŸ¤² MEDIAPIPE SETUP ----------------
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.5)
mp_draw = mp.solutions.drawing_utils

def extract_keypoints(results):
    if results.multi_hand_landmarks:
        return np.array([[res.x, res.y, res.z] for res in results.multi_hand_landmarks[0].landmark]).flatten()
    else:
        return np.zeros(63)

# -------------- ðŸ“¸ COLLECT DATA ----------------
if MODE == 'collect':
    print("[INFO] Starting data collection...")
    for action in ACTIONS:
        for seq in range(NUM_SEQUENCES):
            os.makedirs(os.path.join(DATA_PATH, action, str(seq)), exist_ok=True)

    cap = cv2.VideoCapture(0)
    for action in ACTIONS:
        for seq in range(NUM_SEQUENCES):
            for frame_num in range(SEQUENCE_LENGTH):
                ret, frame = cap.read()
                image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                results = hands.process(image)
                image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

                if results.multi_hand_landmarks:
                    for hand_landmarks in results.multi_hand_landmarks:
                        mp_draw.draw_landmarks(image, hand_landmarks, mp_hands.HAND_CONNECTIONS)

                keypoints = extract_keypoints(results)
                npy_path = os.path.join(DATA_PATH, action, str(seq), f"{frame_num}.npy")
                np.save(npy_path, keypoints)

                cv2.putText(image, f'{action} | Seq: {seq} | Frame: {frame_num}', (10, 30),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
                cv2.imshow('Collecting Keypoints', image)

                if cv2.waitKey(10) & 0xFF == ord('q'):
                    break
    cap.release()
    cv2.destroyAllWindows()
    print("[DONE] Data collection completed.")

# -------------- ðŸ§  TRAIN MODEL ----------------
elif MODE == 'train':
    print("[INFO] Loading dataset and training model...")
    sequences, labels = [], []
    for idx, action in enumerate(ACTIONS):
        for seq in os.listdir(os.path.join(DATA_PATH, action)):
            window = []
            for frame in range(SEQUENCE_LENGTH):
                res = np.load(os.path.join(DATA_PATH, action, seq, f"{frame}.npy"))
                window.append(res)
            sequences.append(window)
            labels.append(idx)

    X = np.array(sequences)
    y = to_categorical(labels).astype(int)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

    model = Sequential([
        LSTM(64, return_sequences=True, activation='relu', input_shape=(SEQUENCE_LENGTH, 63)),
        LSTM(64, activation='relu'),
        Dense(64, activation='relu'),
        Dropout(0.5),
        Dense(len(ACTIONS), activation='softmax')
    ])

    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    model.fit(X_train, y_train, epochs=30, validation_data=(X_test, y_test))
    model.save_weights('sign_model.h5')
    print("[DONE] Model training complete and saved.")

# -------------- ðŸŽ¥ REAL-TIME PREDICTION ----------------
elif MODE == 'predict':
    print("[INFO] Starting real-time sign prediction...")
    model = Sequential([
        LSTM(64, return_sequences=True, activation='relu', input_shape=(SEQUENCE_LENGTH, 63)),
        LSTM(64, activation='relu'),
        Dense(64, activation='relu'),
        Dropout(0.5),
        Dense(len(ACTIONS), activation='softmax')
    ])
    model.load_weights('sign_model.h5')

    cap = cv2.VideoCapture(0)
    sequence, predictions = [], []

    while cap.isOpened():
        ret, frame = cap.read()
        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = hands.process(image)
        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

        keypoints = extract_keypoints(results)
        sequence.append(keypoints)
        sequence = sequence[-SEQUENCE_LENGTH:]

        if len(sequence) == SEQUENCE_LENGTH:
            input_data = np.expand_dims(sequence, axis=0)
            prediction = model.predict(input_data, verbose=0)[0]
            predicted_label = np.argmax(prediction)
            predictions.append(predicted_label)

            cv2.putText(image, f'Gesture: {ACTIONS[predicted_label]}', (10, 40),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)

        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                mp_draw.draw_landmarks(image, hand_landmarks, mp_hands.HAND_CONNECTIONS)

        cv2.imshow('Real-Time Sign Prediction', image)

        if cv2.waitKey(10) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()
    print("[DONE] Real-time recognition stopped.")
